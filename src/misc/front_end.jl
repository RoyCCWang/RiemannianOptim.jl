


function solveRKHS‚Ñùpproblem(y::Vector{T},
                            K::Matrix{T},
                            Œº::T;
                            H::Matrix{T} = gethessianRKHSfitdensitycostfunc(y, K, Œº),
                            Œ±_initial::Vector{T} = ones(T, length(y)),     ## initial guess.
                            max_iter::Int = 400,
                            verbose_flag::Bool = false,
                            max_iter_tCG = 100,
                            œÅ_lower_acceptance = 0.2, # recommended to be less than 0.25
                            œÅ_upper_acceptance = 5.0,
                            minimum_TR_radius::T = 1e-3,
                            maximum_TR_radius::T = 10.0,
                            norm_df_tol = 1e-5,
                            objective_tol = 1e-5,
                            avg_Œîf_tol = 0.0, #1e-12 #1e-5
                            avg_Œîf_window = 10,
                            max_idle_update_count = 50,
                            g::Function = pp->1.0/(dot(pp,pp)+1.0),
                            ùëü = 1e-2)::Tuple{Vector{T},Vector{T},Vector{T},Int} where T <: Real

    #
    f = aa->RKHSfitdensitycostfunc(aa, K, y, Œº)
    df_Euc = aa->gradientRKHSfitdensitycostfunc(y, K, Œº, aa)


    ## configuration for the trust-region subproblem.
    TR_config = TrustRegionConfigType(  minimum_TR_radius,
                                        maximum_TR_radius,
                                        max_iter_tCG,
                                        verbose_flag,
                                        œÅ_lower_acceptance,
                                        œÅ_upper_acceptance)

    opt_config = OptimizationConfigType( max_iter,
                                            verbose_flag,
                                            norm_df_tol,
                                            objective_tol,
                                            avg_Œîf_tol,
                                            avg_Œîf_window,
                                            max_idle_update_count,
                                            ùëü )

    ## Run scheme.
    Œ±_star, f_Œ±_array, norm_df_array,
        num_iters = engineArray(f,
                            df_Euc,
                            Œ±_initial,
                            copy(Œ±_initial),
                            TR_config,
                            opt_config,
                            H,
                            ‚Ñù‚Çä‚Çäarrayexpquadraticretraction;
                            ùëî = g)
    #
    return Œ±_star, f_Œ±_array, norm_df_array, num_iters
end

"""
Œ±[1] > Œ±[2] > ... > Œ±[end] > 0.
Œ≤[l] ‚àà (-œÄ, œÄ], ‚àÄ l ‚àà [L].
"""
function solveFIDŒ±Œ≤problem( Œ©_array::Vector{T},
                            Œª_array::Vector{T},
                            DTFT_s_ùì§::Vector{Complex{T}},
                            DTFT_h_ùì§::Vector{Complex{T}},
                            ùì£,
                            ùì§,
                            Œ±_values_initial::Vector{T},     ## initial guess.
                            Œ≤_initial::Vector{T},
                            Œ±_max::T;
                            max_iter::Int = 90,
                            verbose_flag::Bool = false,
                            max_iter_tCG = 30,
                            œÅ_lower_acceptance = 0.2, # recommended to be less than 0.25
                            œÅ_upper_acceptance = 5.0,
                            minimum_TR_radius::T = 1e-3,
                            maximum_TR_radius::T = 10.0,
                            norm_df_tol = 1e-5,
                            objective_tol = 1e-5,
                            avg_Œîf_tol = 0.0, #1e-12 #1e-5
                            avg_Œîf_window = 10,
                            max_idle_update_count = 50,
                            g::Function = pp->one(T), # use Euclidean metric.
                            ùëü = 1e-2)::Tuple{Vector{T},Vector{T},Vector{T},Int} where T <: Real

    # set up.
    L = length(Œ≤_initial)
    @assert length(Œ©_array) == L == length(Œª_array)

    N_pairs = length(Œ±_values_initial)

    # prepare initial guess.
    p_initial = [Œ±_values_initial; Œ≤_initial]
    N_vars = length(p_initial)

    # pre-compute constant.
    DTFT_hs_ùì§ = DTFT_s_ùì§ .* DTFT_h_ùì§

    # set up cost function.
    f = aa->FIDcostfunc(aa, Œ©_array,
            Œª_array, N_pairs, ùì£, ùì§, DTFT_hs_ùì§, DTFT_h_ùì§)

    df_Euc = aa->ForwardDiff.gradient(f, aa)

    # tell optimizer to use hessian approx.
    H = zeros(T, N_vars, N_vars)

    # set up retractions.
    function ‚ÑúnD( p::Vector{T},
                X::Vector{T},
                t::T2)::Vector{T2} where {T <: Real, T2 <: Real}

        return FIDnDretraction(p, X, t, N_pairs, Œ±_max)
    end

    function ‚ÑúnD( p::Vector{T},
                X::Vector{T},
                Y::Vector{T},
                t::T2)::Vector{T2} where {T <: Real, T2 <: Real}

        return FIDnDretraction(p, X, Y, t, N_pairs, Œ±_max)
    end

    function ‚Ñú1D( p::Vector{T},
                X::Vector{T},
                t::T2)::Vector{T2} where {T <: Real, T2 <: Real}

        return FID1Dretraction(p, X, t, N_pairs, Œ±_max)
    end

    function ‚Ñú1D( p::Vector{T},
                X::Vector{T},
                Y::Vector{T},
                t::T2)::Vector{T2} where {T <: Real, T2 <: Real}

        return FID1Dretraction(p, X, Y, t, N_pairs, Œ±_max)
    end

    ‚Ñú = ‚ÑúnD
    if length(Œ±_values_initial) == 1
        ‚Ñú = ‚Ñú1D
    end

    ## configuration for the trust-region subproblem.
    TR_config = TrustRegionConfigType(  minimum_TR_radius,
                                        maximum_TR_radius,
                                        max_iter_tCG,
                                        verbose_flag,
                                        œÅ_lower_acceptance,
                                        œÅ_upper_acceptance)

    opt_config = OptimizationConfigType( max_iter,
                                            verbose_flag,
                                            norm_df_tol,
                                            objective_tol,
                                            avg_Œîf_tol,
                                            avg_Œîf_window,
                                            max_idle_update_count,
                                            ùëü )

    ## Run scheme.
    p_star, f_p_array, norm_df_array,
        num_iters = engineArray(f,
                            df_Euc,
                            p_initial,
                            copy(p_initial),
                            TR_config,
                            opt_config,
                            H,
                            ‚Ñú;
                            ùëî = g)
    #
    return p_star, f_p_array, norm_df_array, num_iters
end



function solveFIDŒ≤problem( Œ©_array::Vector{T},
                            Œª_array::Vector{T},
                            Œ±_array::Vector{T},
                            DTFT_s_ùì§::Vector{Complex{T}},
                            DTFT_h_ùì§::Vector{Complex{T}},
                            ùì£,
                            ùì§,
                            p_initial::Vector{T};
                            max_iter::Int = 90,
                            verbose_flag::Bool = false,
                            max_iter_tCG = 30,
                            œÅ_lower_acceptance = 0.2, # recommended to be less than 0.25
                            œÅ_upper_acceptance = 5.0,
                            minimum_TR_radius::T = 1e-3,
                            maximum_TR_radius::T = 10.0,
                            norm_df_tol = 1e-5,
                            objective_tol = 1e-5,
                            avg_Œîf_tol = 0.0, #1e-12 #1e-5
                            avg_Œîf_window = 10,
                            max_idle_update_count = 50,
                            g::Function = pp->one(T), # use Euclidean metric.
                            ùëü = 1e-2)::Tuple{Vector{T},Vector{T},Vector{T},Int} where T <: Real

    # set up.
    L = length(Œ≤_initial)
    @assert length(Œ©_array) == L == length(Œª_array)

    # prepare initial guess.
    N_vars = length(p_initial)

    # pre-compute constant.
    DTFT_hs_ùì§ = DTFT_s_ùì§ .* DTFT_h_ùì§

    # set up cost function.
    f = aa->FIDphasecostfunc(aa, Œ©_array,
            Œª_array, Œ±_array, ùì£, ùì§, DTFT_hs_ùì§, DTFT_h_ùì§)

    df_Euc = aa->ForwardDiff.gradient(f, aa)

    # tell optimizer to use hessian approx.
    H = zeros(T, N_vars, N_vars)

    # retraction.
    ‚Ñú = circleretractionwithproject

    ## configuration for the trust-region subproblem.
    TR_config = TrustRegionConfigType(  minimum_TR_radius,
                                        maximum_TR_radius,
                                        max_iter_tCG,
                                        verbose_flag,
                                        œÅ_lower_acceptance,
                                        œÅ_upper_acceptance)

    opt_config = OptimizationConfigType( max_iter,
                                            verbose_flag,
                                            norm_df_tol,
                                            objective_tol,
                                            avg_Œîf_tol,
                                            avg_Œîf_window,
                                            max_idle_update_count,
                                            ùëü )

    ## Run scheme.
    p_star, f_p_array, norm_df_array,
        num_iters = engineArray(f,
                            df_Euc,
                            p_initial,
                            copy(p_initial),
                            TR_config,
                            opt_config,
                            H,
                            ‚Ñú;
                            ùëî = g)
    #
    return p_star, f_p_array, norm_df_array, num_iters
end
